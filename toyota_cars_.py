# -*- coding: utf-8 -*-
"""Toyota cars .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xGiQuoVlGGJ334EQbJnbFuf1_qu4KCSE
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

import pandas as pd
from google.colab import files
uploaded=files.upload()
file_name=list(uploaded.keys())[0]
df=pd.read_csv(file_name)

df.head()

df.dropna(inplace=True)

features = ['Age_08_04', 'Doors', 'HP', 'Cylinders']

X = df[features]
y = df['Price']

print(df['Model'].unique()[:15])

from sklearn.preprocessing import LabelEncoder
LE = LabelEncoder()
df['Model'] = LE.fit_transform(df['Model'])
df.head()

import statsmodels.formula.api as smf
model = smf.ols('Model ~ Price + Age_08_04 + KM + Doors + Cylinders + Gears + Weight', data=df).fit()

model.params

print(model.tvalues,'\n',model.pvalues)

(model.rsquared,model.rsquared_adj)

ml_price=smf.ols('Model ~ Price',data=df).fit()
print(ml_price.tvalues,'\n',ml_price.pvalues)

(ml_price.rsquared,ml_price.rsquared_adj)

ml_age=smf.ols('Model ~ Age_08_04',data=df).fit()
print(ml_age.tvalues,'\n',ml_age.pvalues)

(ml_age.rsquared,ml_age.rsquared_adj)

import statsmodels.api as sm
import matplotlib.pyplot as plt
qqplot=sm.qqplot(model.resid,line='q')
plt.title("Normal Q-Q plot of residuals")
plt.show()

def get_standardized_values( vals ):
  return (vals - vals.mean())/vals.std()

plt.scatter(get_standardized_values(model.fittedvalues),
           get_standardized_values(model.resid))
plt.title('Residual Plot')
plt.xlabel('Standardized Fitted Values')
plt.ylabel('Standardized Residuals')
plt.show()

import matplotlib.pyplot as plt
import statsmodels.api as sm
fig = plt.figure(figsize=(15,8))
fig = sm.graphics.plot_regress_exog(model, "Price", fig=fig)
plt.show()

fig=plt.subplots(figsize=(20,7))
influence = model.get_influence()
c = influence.cooks_distance[0]
plt.stem(np.arange(len(df)),np.round(c,3))
plt.xlabel('Row Index')
plt.ylabel('Cooks Distance')
plt.show()

(np.argmax(c),np.max(c))

from statsmodels.graphics.regressionplots import influence_plot
influence_plot(model)
plt.show()

k=df.shape[1]
n=df.shape[0]
leverage_cutoff=3*((k+1)/n)

df[df.index.isin([1276,994])]

import seaborn as sns
import matplotlib.pyplot as plt
corr = df.corr()
plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap='coolwarm',fmt=".2f",linewidth=0.5)
plt.show()

import seaborn as sns
sns.distplot(df['HP'])

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
data = pd.DataFrame({
    'Age_08_04': [5, 3, 10],
    'KM': [120000, 80000, 150000],
    'HP': [100, 120, 80],
    'Weight': [850, 900, 950]
})
plt.figure(figsize=(8,6))
sns.pairplot(data)
plt.grid(True)
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
X_test = X_test[features]
y_pred = model.predict(X_test)

X_test = pd.DataFrame(X_test, columns=features)
y_pred = model.predict(X_test)

new_data = pd.DataFrame({
    'Age_08_04': [5, 3, 10],
    'Doors': [4, 4, 4],
    'HP': [100, 120, 80],
    'Cylinders': [4, 4, 4]
})
price_predictions = model.predict(new_data)
print(price_predictions)

import pandas as pd

from google.colab import files
uploaded = files.upload()
file_name=list(uploaded.keys())[0]
cars_new = pd .read_csv(file_name)
cars_new

car1 = cars_new.drop(cars_new.index[[956,991,960,221,654]],axis=0).reset_index()

car1 = car1.drop(['index'],axis=1)
car1

final_price1 = smf.ols('Price~KM+Age_08_04+Gears+Weight+Doors',data=car1).fit()

(final_price1.rsquared,final_price1.aic)

final_price2 = smf.ols('Price~KM+Age_08_04',data=car1).fit()

(final_price2.rsquared,final_price2.aic)

final_price3 = smf.ols('Price~KM+Age_08_04+HP+Weight',data=car1).fit()

(final_price3.rsquared,final_price3.aic)

final_price4 = smf.ols('Price~KM+Age_08_04+Gears+Weight+HP',data=car1).fit()

(final_price4.rsquared,final_price4.aic)